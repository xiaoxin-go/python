import requests
import json
import time
import os
import csv
import xlwt

from apscheduler.schedulers.background import BackgroundScheduler, BlockingScheduler
from apscheduler.jobstores.base import JobLookupError
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def now():
    return time.strftime('%Y-%m-%d %H%M%S',time.localtime())

class Nessus:
    def __init__(self, username, password, server_ip='https://localhost:8834'):
        self.username = username
        self.password = password
        self.server_ip = server_ip
        self.token = self.getToken()
        self.path = ''
        self.filename = ''
        self.now = now()
        self.scan_name = 'test'
        self.headers = {'X-Cookie': 'token={token};'.format(token=self.token),
         'Content-type': 'application/json',
         'Accept': 'text/plain'}
        self.filter = {
                'filter.0.quality': 'eq',
                'filter.0.filter': 'severity',
                'filter.0.value': 3,
                'filter.1.quality': 'eq',
                'filter.1.filter': 'severity',
                'filter.1.value': 4,
                'filter.search_type': 'or'
            }
        self.csv_names = []

    # 封装post请求
    def post(self, url, data=None, headers=None):
        """
        封装post请求
        :param url: 请求地址
        :param data: 请求数据
        :param headers: 请求头
        :return: 转换后的数据
        """
        print('post ---------------------------------')
        print('url:', url)
        print('data:', data)
        print('end-----------------------------------\n')
        resp = requests.post(url, data, headers=headers, verify=False)
        resp.close()
        if resp.status_code == 200:
            result = json.loads(resp.text)
            #print(result)
            return result
        print(resp, resp.text)

    # 封装get请求
    def get(self, url, data=None, headers=None):
        """
        封装get请求
        :param url: 请求地址
        :param data: 请求数据
        :param headers: 请求头
        :return: 转换后的数据
        """
        print('get-------------------------------------')
        print('url:', url)
        print('data:', data)
        print('end-------------------------------------\n')
        resp = requests.get(url, data, headers=headers, verify=False)
        resp.close()
        if resp.status_code == 200:
            result = json.loads(resp.text)
            #print(result)
            return result
        print(resp, resp.text)

    # 获取模板ID
    def getTemplateUuid(self, name='advanced'):
        """
        根据模板名称，从所有模板中，获取模板ID
        :param name: str 模板名称
        :return: int 模板ID
        """
        url = self.server_ip + '/editor/scan/templates'
        result = self.get(url, headers=self.headers)
        if result:
            templates = result.get('templates')
            for template in templates:
                if template['name'] == name:
                    return template['uuid']

    # 创建扫描任务
    def createScan(self, template_uuid, name, text_targets):
        """
        创建扫描任务
        :param template_uuid: str 模板UUID
        :param name: str 任务名称
        :param text_targets: list IP列表
        :return:  当前任务对象
        """
        url = self.server_ip + '/scans'
        data = {
            'uuid': template_uuid,
            'settings': {
                'name': name,
                'enabled': True,
                'text_targets': text_targets
            },
        }
        result = self.post(url, data, headers=self.headers)

    # 获取token
    def getToken(self):
        """
        连接获取token
        :return:  str token值
        """
        data = {
            'username': self.username,
            'password': self.password
        }
        url = self.server_ip + '/session'
        result = self.post(url, data)
        if result:
            return result.get('token')

    # 获取扫描任务列表
    def getScanList(self):
        """
        获取扫描任务列表
        :return: list 当前任务列表
        """
        url = self.server_ip + '/scans'
        result = self.get(url, headers=self.headers)
        #resp = requests.post(url)
        return result

    # 获取扫描任务ID
    def getScanId(self, scan_name):
        """
        根据扫描任务名称，获取扫描任务ID
        :param scan_name: str 任务名称
        :return: int 扫描任务ID
        """
        self.scan_name = scan_name
        scan_list = self.getScanList().get('scans')
        if not scan_list:
            return
        for scan in scan_list:
            if scan['name'] == scan_name:
                return scan['id']

    # get scan detail
    def getScan(self, scan_id):
        url = self.server_ip + '/scans/' + str(scan_id)
        result = self.get(url, headers=self.headers)
        return result

    # 根据scanId发起任务
    def scanLuanch(self, scan_id, ip_list):
        """
        开启扫描任务
        :param scan_id: int 扫描任务ID
        :param ip_list: list 扫描IP列表
        :return: str 扫描uuid
        """
        url = self.server_ip + '/scans/' + str(scan_id) + '/launch'
        data = {
            'alt_targets': ip_list
        }
        result = self.post(url, data, self.headers)
        if result:
            scan_uuid = result.get('scan_uuid')
            return scan_uuid

    # 动态监听任务
    def listenScan(self, scan_id):
        """
        监听扫描任务是否执行完成
        :param scan_id: int 扫描任务ID
        :return: boolean  true为扫描完成，否则扫描出错
        """
        url = self.server_ip + '/scans/' + str(scan_id)
        while True:
            result = self.get(url, headers=self.headers)
            if result:
                status = result.get('info',{}).get('status')
                if status == 'running':
                    print('scan running...')
                elif status == 'completed':
                    return True
                else:
                    break
            time.sleep(60)

    # 获取下载参数
    def getExport(self, scan_id, file_type='html'):
        """
        请求export接口，获取当前任务下载报告的参数
        :param scan_id: int 扫描任务ID
        :return: dict {'file': ...}
        """
        url = self.server_ip + '/scans/' + str(scan_id) + '/export' #?history_id=9'
        data = {
            'format': file_type,
            #'chapters': 'vuln_hosts_summary',
            #'filters': self.filters
            'chapters': 'vuln_by_host'
        }
        data.update(self.filter)
        result = self.post(url, data=json.dumps(data), headers=self.headers)
        return result

    # 获取生成报告状态
    def getStatus(self, scan_id, file_id):
        """
        监听生成报告的状态，判断是否生成完成
        :param scan_id: int 扫描任务ID
        :param file_id: int 文件ID
        :return: boolean
        """
        url = self.server_ip + '/scans/' + str(scan_id) + '/export/' + str(file_id) + '/status'
        while True:
            result = self.get(url, headers=self.headers)
            if result:
                status = result.get('status')
                if status == 'loading':
                    print('export loading...')
                    time.sleep(10)
                else:
                    return True
            else:
                return False

    # 下载报告
    def download(self, scan_id, file_id, file_type='html', return_text=False):
        """
        下载生成的报告
        :param scan_id: int 任务ID
        :param file_id: int 文件ID
        :return: None
        """
        url = self.server_ip + '/scans/' + str(scan_id) + '/export/' + str(file_id) + '/download'
        resp = requests.get(url, headers=self.headers, verify=False)

        # 若是手动解析csv则返回文件内容
        if return_text:
            return resp.text

        filename = r'%s %s.%s' % (self.filename, now(), file_type)
        with open(r'%s/%s' % (self.path, filename), 'w') as f:
            if file_type == 'html':
                f.write(resp.text.replace('</body></html>',
                                             '<script>toggleAll(true)</script></body></html>'))
            else:
                f.write(resp.text)
        return filename

    # csv文件处理
    def getCsv(self, scan_id):
        # 首先处理available的漏洞信息
        self.csv_available = []
        for i in [3,4]:
            self.filter = {
                    'filter.0.quality': 'eq',
                    'filter.0.filter': 'severity',
                    'filter.0.value': i,
                    'filter.1.quality': 'eq',
                    'filter.1.filter': 'exploit_available',
                    'filter.1.value': True,
                    'filter.search_type': 'and'
                }
            file_id = self.getExport(scan_id, 'csv')['file']
            if not self.getStatus(scan_id, file_id):
                print('export error')
                continue

            csv_data = self.download(scan_id, file_id, return_text=True)
            self.csv_available.append(self.parseCsv(csv_data, True))

        print('download.............................. for csv')
        file_id = self.getExport(scan_id)['file']
        if not self.getStatus(scan_id, file_id):
            print('生成报告出错')
            return

        # 下载附件
        print('download......')
        csv_all_data = self.download(scan_id, file_id, return_text=True)
        csv_all = self.parseCsv(csv_all_data)
        return csv_all

    # 处理csv数据
    def parseCsv(self, csv_data, available=False):
        result_list = []
        plugin_id_list = []
        hosts = []
        cf = csv.reader(csv_data)
        for i, line in enumerate(cf):
            if i == 0 or not line:
                continue
            else:
                plugin_id = line[0]
                host = line[4]
                if plugin_id in plugin_id_list and host in hosts:
                    continue
                plugin_id_list.append(plugin_id)
                hosts.append(host)
                if available:
                    result_list.append([host, plugin_id])
                else:
                    if [host,plugin_id] in self.csv_available:
                        result_list.append([host, plugin_id, line[7], line[3], 'True'])
                    else:
                        result_list.append([host, plugin_id, line[7], line[3], 'False'])
        return result_list

    # 写入excel
    def save_exl(self, title_list, data):
        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet(self.scan_name)

        # 写入标题
        for i, title in enumerate(title_list):
            sheet.write(0, i, title)

        # 写入数据
        for row, line in enumerate(data):
            for i, value in enumerate(line):
                sheet.write(row+1, i, value)
        workbook.save(r'%s/%s-%s.xls' % (self.path, self.filename, self.now))

    # 一键执行
    def main(self, scan_name):
        # 获取扫描ID
        scan_id = self.getScanId(scan_name)

        # 执行
        #self.scanLuanch(scan_id, None)

        # 监听执行状态
        #if not self.listenScan(scan_id):
        #    print('监听执行出错')
        #    return 

        # 下载HTML文件
        print('download.............................. for html')
        file_id = self.getExport(scan_id)['file']
        if not self.getStatus(scan_id, file_id):
            print('生成报告出错')
            return

        # 下载附件
        print('download......')
        self.download(scan_id, file_id)

        # 解析csv文件
        csv_data = self.getCsv(scan_id)

        # 保存csv格式到excel
        title = ['Host', 'Plugin ID', 'Name', 'Risk', 'Exploit_available']
        self.save_exl(title, csv_data)



def main():
    print('start..........................................................')
    username = 'admin'
    password = 'v&G#obUisDrcHj3Q'
    scan_name = 'Unisoc_DMZ'
    ness = Nessus(username, password)
    ness.main(scan_name)
    print('end............................................................')

if __name__ == '__main__':
    #main()
    aps = BlockingScheduler()
    #aps.add_job(func=main, trigger='interval', minutes=1, id='test')
    #aps.start()
    aps.add_job(main, 'cron', day='*', hour='13', minute='14', second='01', id='test')
    aps.start()


